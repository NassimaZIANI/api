<?php
/**
 * ParcoursApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * apogee API
 *
 * API for apogee
 *
 * OpenAPI spec version: 1.0.0
 * Contact: nassima.ziani1996@gmail.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.17
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Swagger\Client\ApiException;
use Swagger\Client\Configuration;
use Swagger\Client\HeaderSelector;
use Swagger\Client\ObjectSerializer;

/**
 * ParcoursApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ParcoursApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation addParcours
     *
     * adds a Parcours
     *
     * @param  string $diplome diplome (required)
     * @param  string $accro_m accro_m (required)
     * @param  \Swagger\Client\Model\ParcoursBody $parcours Parcours item to add/edit (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\ParcoursBody[]
     */
    public function addParcours($diplome, $accro_m, $parcours = null)
    {
        list($response) = $this->addParcoursWithHttpInfo($diplome, $accro_m, $parcours);
        return $response;
    }

    /**
     * Operation addParcoursWithHttpInfo
     *
     * adds a Parcours
     *
     * @param  string $diplome (required)
     * @param  string $accro_m (required)
     * @param  \Swagger\Client\Model\ParcoursBody $parcours Parcours item to add/edit (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\ParcoursBody[], HTTP status code, HTTP response headers (array of strings)
     */
    public function addParcoursWithHttpInfo($diplome, $accro_m, $parcours = null)
    {
        $returnType = '\Swagger\Client\Model\ParcoursBody[]';
        $request = $this->addParcoursRequest($diplome, $accro_m, $parcours);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ParcoursBody[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation addParcoursAsync
     *
     * adds a Parcours
     *
     * @param  string $diplome (required)
     * @param  string $accro_m (required)
     * @param  \Swagger\Client\Model\ParcoursBody $parcours Parcours item to add/edit (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addParcoursAsync($diplome, $accro_m, $parcours = null)
    {
        return $this->addParcoursAsyncWithHttpInfo($diplome, $accro_m, $parcours)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation addParcoursAsyncWithHttpInfo
     *
     * adds a Parcours
     *
     * @param  string $diplome (required)
     * @param  string $accro_m (required)
     * @param  \Swagger\Client\Model\ParcoursBody $parcours Parcours item to add/edit (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addParcoursAsyncWithHttpInfo($diplome, $accro_m, $parcours = null)
    {
        $returnType = '\Swagger\Client\Model\ParcoursBody[]';
        $request = $this->addParcoursRequest($diplome, $accro_m, $parcours);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'addParcours'
     *
     * @param  string $diplome (required)
     * @param  string $accro_m (required)
     * @param  \Swagger\Client\Model\ParcoursBody $parcours Parcours item to add/edit (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function addParcoursRequest($diplome, $accro_m, $parcours = null)
    {
        // verify the required parameter 'diplome' is set
        if ($diplome === null || (is_array($diplome) && count($diplome) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $diplome when calling addParcours'
            );
        }
        // verify the required parameter 'accro_m' is set
        if ($accro_m === null || (is_array($accro_m) && count($accro_m) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accro_m when calling addParcours'
            );
        }

        $resourcePath = '/diplomes/{diplome}/mentions/{accroM}/parcours';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($diplome !== null) {
            $resourcePath = str_replace(
                '{' . 'diplome' . '}',
                ObjectSerializer::toPathValue($diplome),
                $resourcePath
            );
        }
        // path params
        if ($accro_m !== null) {
            $resourcePath = str_replace(
                '{' . 'accroM' . '}',
                ObjectSerializer::toPathValue($accro_m),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($parcours)) {
            $_tempBody = $parcours;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteParcours
     *
     * deletes a Parcours
     *
     * @param  string $diplome diplome (required)
     * @param  string $accro_m accro_m (required)
     * @param  string $accro_p accro_p (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteParcours($diplome, $accro_m, $accro_p)
    {
        $this->deleteParcoursWithHttpInfo($diplome, $accro_m, $accro_p);
    }

    /**
     * Operation deleteParcoursWithHttpInfo
     *
     * deletes a Parcours
     *
     * @param  string $diplome (required)
     * @param  string $accro_m (required)
     * @param  string $accro_p (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteParcoursWithHttpInfo($diplome, $accro_m, $accro_p)
    {
        $returnType = '';
        $request = $this->deleteParcoursRequest($diplome, $accro_m, $accro_p);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteParcoursAsync
     *
     * deletes a Parcours
     *
     * @param  string $diplome (required)
     * @param  string $accro_m (required)
     * @param  string $accro_p (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteParcoursAsync($diplome, $accro_m, $accro_p)
    {
        return $this->deleteParcoursAsyncWithHttpInfo($diplome, $accro_m, $accro_p)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteParcoursAsyncWithHttpInfo
     *
     * deletes a Parcours
     *
     * @param  string $diplome (required)
     * @param  string $accro_m (required)
     * @param  string $accro_p (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteParcoursAsyncWithHttpInfo($diplome, $accro_m, $accro_p)
    {
        $returnType = '';
        $request = $this->deleteParcoursRequest($diplome, $accro_m, $accro_p);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteParcours'
     *
     * @param  string $diplome (required)
     * @param  string $accro_m (required)
     * @param  string $accro_p (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteParcoursRequest($diplome, $accro_m, $accro_p)
    {
        // verify the required parameter 'diplome' is set
        if ($diplome === null || (is_array($diplome) && count($diplome) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $diplome when calling deleteParcours'
            );
        }
        // verify the required parameter 'accro_m' is set
        if ($accro_m === null || (is_array($accro_m) && count($accro_m) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accro_m when calling deleteParcours'
            );
        }
        // verify the required parameter 'accro_p' is set
        if ($accro_p === null || (is_array($accro_p) && count($accro_p) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accro_p when calling deleteParcours'
            );
        }

        $resourcePath = '/diplomes/{diplome}/mentions/{accroM}/parcours/{accroP}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($diplome !== null) {
            $resourcePath = str_replace(
                '{' . 'diplome' . '}',
                ObjectSerializer::toPathValue($diplome),
                $resourcePath
            );
        }
        // path params
        if ($accro_m !== null) {
            $resourcePath = str_replace(
                '{' . 'accroM' . '}',
                ObjectSerializer::toPathValue($accro_m),
                $resourcePath
            );
        }
        // path params
        if ($accro_p !== null) {
            $resourcePath = str_replace(
                '{' . 'accroP' . '}',
                ObjectSerializer::toPathValue($accro_p),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getParcours
     *
     * gets Parcours
     *
     * @param  string $diplome diplome (required)
     * @param  string $accro_m accro_m (required)
     * @param  int $sem sem (optional)
     * @param  int $id_ue id_ue (optional)
     * @param  int $id_ecue id_ecue (optional)
     * @param  int $modalite modalite (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\ListParcours
     */
    public function getParcours($diplome, $accro_m, $sem = null, $id_ue = null, $id_ecue = null, $modalite = null)
    {
        list($response) = $this->getParcoursWithHttpInfo($diplome, $accro_m, $sem, $id_ue, $id_ecue, $modalite);
        return $response;
    }

    /**
     * Operation getParcoursWithHttpInfo
     *
     * gets Parcours
     *
     * @param  string $diplome (required)
     * @param  string $accro_m (required)
     * @param  int $sem (optional)
     * @param  int $id_ue (optional)
     * @param  int $id_ecue (optional)
     * @param  int $modalite (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\ListParcours, HTTP status code, HTTP response headers (array of strings)
     */
    public function getParcoursWithHttpInfo($diplome, $accro_m, $sem = null, $id_ue = null, $id_ecue = null, $modalite = null)
    {
        $returnType = '\Swagger\Client\Model\ListParcours';
        $request = $this->getParcoursRequest($diplome, $accro_m, $sem, $id_ue, $id_ecue, $modalite);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ListParcours',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getParcoursAsync
     *
     * gets Parcours
     *
     * @param  string $diplome (required)
     * @param  string $accro_m (required)
     * @param  int $sem (optional)
     * @param  int $id_ue (optional)
     * @param  int $id_ecue (optional)
     * @param  int $modalite (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getParcoursAsync($diplome, $accro_m, $sem = null, $id_ue = null, $id_ecue = null, $modalite = null)
    {
        return $this->getParcoursAsyncWithHttpInfo($diplome, $accro_m, $sem, $id_ue, $id_ecue, $modalite)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getParcoursAsyncWithHttpInfo
     *
     * gets Parcours
     *
     * @param  string $diplome (required)
     * @param  string $accro_m (required)
     * @param  int $sem (optional)
     * @param  int $id_ue (optional)
     * @param  int $id_ecue (optional)
     * @param  int $modalite (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getParcoursAsyncWithHttpInfo($diplome, $accro_m, $sem = null, $id_ue = null, $id_ecue = null, $modalite = null)
    {
        $returnType = '\Swagger\Client\Model\ListParcours';
        $request = $this->getParcoursRequest($diplome, $accro_m, $sem, $id_ue, $id_ecue, $modalite);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getParcours'
     *
     * @param  string $diplome (required)
     * @param  string $accro_m (required)
     * @param  int $sem (optional)
     * @param  int $id_ue (optional)
     * @param  int $id_ecue (optional)
     * @param  int $modalite (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getParcoursRequest($diplome, $accro_m, $sem = null, $id_ue = null, $id_ecue = null, $modalite = null)
    {
        // verify the required parameter 'diplome' is set
        if ($diplome === null || (is_array($diplome) && count($diplome) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $diplome when calling getParcours'
            );
        }
        // verify the required parameter 'accro_m' is set
        if ($accro_m === null || (is_array($accro_m) && count($accro_m) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accro_m when calling getParcours'
            );
        }

        $resourcePath = '/diplomes/{diplome}/mentions/{accroM}/parcours';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($sem !== null) {
            $queryParams['sem'] = ObjectSerializer::toQueryValue($sem);
        }
        // query params
        if ($id_ue !== null) {
            $queryParams['idUE'] = ObjectSerializer::toQueryValue($id_ue);
        }
        // query params
        if ($id_ecue !== null) {
            $queryParams['idECUE'] = ObjectSerializer::toQueryValue($id_ecue);
        }
        // query params
        if ($modalite !== null) {
            $queryParams['modalite'] = ObjectSerializer::toQueryValue($modalite);
        }

        // path params
        if ($diplome !== null) {
            $resourcePath = str_replace(
                '{' . 'diplome' . '}',
                ObjectSerializer::toPathValue($diplome),
                $resourcePath
            );
        }
        // path params
        if ($accro_m !== null) {
            $resourcePath = str_replace(
                '{' . 'accroM' . '}',
                ObjectSerializer::toPathValue($accro_m),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getParcoursAccro
     *
     * gets a Parcours by it's accro
     *
     * @param  string $diplome diplome (required)
     * @param  string $accro_m accro_m (required)
     * @param  string $accro_p accro_p (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\Parcours
     */
    public function getParcoursAccro($diplome, $accro_m, $accro_p)
    {
        list($response) = $this->getParcoursAccroWithHttpInfo($diplome, $accro_m, $accro_p);
        return $response;
    }

    /**
     * Operation getParcoursAccroWithHttpInfo
     *
     * gets a Parcours by it's accro
     *
     * @param  string $diplome (required)
     * @param  string $accro_m (required)
     * @param  string $accro_p (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\Parcours, HTTP status code, HTTP response headers (array of strings)
     */
    public function getParcoursAccroWithHttpInfo($diplome, $accro_m, $accro_p)
    {
        $returnType = '\Swagger\Client\Model\Parcours';
        $request = $this->getParcoursAccroRequest($diplome, $accro_m, $accro_p);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Parcours',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getParcoursAccroAsync
     *
     * gets a Parcours by it's accro
     *
     * @param  string $diplome (required)
     * @param  string $accro_m (required)
     * @param  string $accro_p (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getParcoursAccroAsync($diplome, $accro_m, $accro_p)
    {
        return $this->getParcoursAccroAsyncWithHttpInfo($diplome, $accro_m, $accro_p)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getParcoursAccroAsyncWithHttpInfo
     *
     * gets a Parcours by it's accro
     *
     * @param  string $diplome (required)
     * @param  string $accro_m (required)
     * @param  string $accro_p (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getParcoursAccroAsyncWithHttpInfo($diplome, $accro_m, $accro_p)
    {
        $returnType = '\Swagger\Client\Model\Parcours';
        $request = $this->getParcoursAccroRequest($diplome, $accro_m, $accro_p);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getParcoursAccro'
     *
     * @param  string $diplome (required)
     * @param  string $accro_m (required)
     * @param  string $accro_p (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getParcoursAccroRequest($diplome, $accro_m, $accro_p)
    {
        // verify the required parameter 'diplome' is set
        if ($diplome === null || (is_array($diplome) && count($diplome) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $diplome when calling getParcoursAccro'
            );
        }
        // verify the required parameter 'accro_m' is set
        if ($accro_m === null || (is_array($accro_m) && count($accro_m) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accro_m when calling getParcoursAccro'
            );
        }
        // verify the required parameter 'accro_p' is set
        if ($accro_p === null || (is_array($accro_p) && count($accro_p) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accro_p when calling getParcoursAccro'
            );
        }

        $resourcePath = '/diplomes/{diplome}/mentions/{accroM}/parcours/{accroP}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($diplome !== null) {
            $resourcePath = str_replace(
                '{' . 'diplome' . '}',
                ObjectSerializer::toPathValue($diplome),
                $resourcePath
            );
        }
        // path params
        if ($accro_m !== null) {
            $resourcePath = str_replace(
                '{' . 'accroM' . '}',
                ObjectSerializer::toPathValue($accro_m),
                $resourcePath
            );
        }
        // path params
        if ($accro_p !== null) {
            $resourcePath = str_replace(
                '{' . 'accroP' . '}',
                ObjectSerializer::toPathValue($accro_p),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateParcoursAccro
     *
     * update a Parcours by its accro
     *
     * @param  string $diplome diplome (required)
     * @param  string $accro_m accro_m (required)
     * @param  string $accro_p accro_p (required)
     * @param  \Swagger\Client\Model\ParcoursBody $parcours Parcours item to add/edit (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\ParcoursBody
     */
    public function updateParcoursAccro($diplome, $accro_m, $accro_p, $parcours = null)
    {
        list($response) = $this->updateParcoursAccroWithHttpInfo($diplome, $accro_m, $accro_p, $parcours);
        return $response;
    }

    /**
     * Operation updateParcoursAccroWithHttpInfo
     *
     * update a Parcours by its accro
     *
     * @param  string $diplome (required)
     * @param  string $accro_m (required)
     * @param  string $accro_p (required)
     * @param  \Swagger\Client\Model\ParcoursBody $parcours Parcours item to add/edit (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\ParcoursBody, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateParcoursAccroWithHttpInfo($diplome, $accro_m, $accro_p, $parcours = null)
    {
        $returnType = '\Swagger\Client\Model\ParcoursBody';
        $request = $this->updateParcoursAccroRequest($diplome, $accro_m, $accro_p, $parcours);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ParcoursBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Parcours[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateParcoursAccroAsync
     *
     * update a Parcours by its accro
     *
     * @param  string $diplome (required)
     * @param  string $accro_m (required)
     * @param  string $accro_p (required)
     * @param  \Swagger\Client\Model\ParcoursBody $parcours Parcours item to add/edit (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateParcoursAccroAsync($diplome, $accro_m, $accro_p, $parcours = null)
    {
        return $this->updateParcoursAccroAsyncWithHttpInfo($diplome, $accro_m, $accro_p, $parcours)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateParcoursAccroAsyncWithHttpInfo
     *
     * update a Parcours by its accro
     *
     * @param  string $diplome (required)
     * @param  string $accro_m (required)
     * @param  string $accro_p (required)
     * @param  \Swagger\Client\Model\ParcoursBody $parcours Parcours item to add/edit (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateParcoursAccroAsyncWithHttpInfo($diplome, $accro_m, $accro_p, $parcours = null)
    {
        $returnType = '\Swagger\Client\Model\ParcoursBody';
        $request = $this->updateParcoursAccroRequest($diplome, $accro_m, $accro_p, $parcours);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateParcoursAccro'
     *
     * @param  string $diplome (required)
     * @param  string $accro_m (required)
     * @param  string $accro_p (required)
     * @param  \Swagger\Client\Model\ParcoursBody $parcours Parcours item to add/edit (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateParcoursAccroRequest($diplome, $accro_m, $accro_p, $parcours = null)
    {
        // verify the required parameter 'diplome' is set
        if ($diplome === null || (is_array($diplome) && count($diplome) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $diplome when calling updateParcoursAccro'
            );
        }
        // verify the required parameter 'accro_m' is set
        if ($accro_m === null || (is_array($accro_m) && count($accro_m) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accro_m when calling updateParcoursAccro'
            );
        }
        // verify the required parameter 'accro_p' is set
        if ($accro_p === null || (is_array($accro_p) && count($accro_p) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accro_p when calling updateParcoursAccro'
            );
        }

        $resourcePath = '/diplomes/{diplome}/mentions/{accroM}/parcours/{accroP}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($diplome !== null) {
            $resourcePath = str_replace(
                '{' . 'diplome' . '}',
                ObjectSerializer::toPathValue($diplome),
                $resourcePath
            );
        }
        // path params
        if ($accro_m !== null) {
            $resourcePath = str_replace(
                '{' . 'accroM' . '}',
                ObjectSerializer::toPathValue($accro_m),
                $resourcePath
            );
        }
        // path params
        if ($accro_p !== null) {
            $resourcePath = str_replace(
                '{' . 'accroP' . '}',
                ObjectSerializer::toPathValue($accro_p),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($parcours)) {
            $_tempBody = $parcours;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
