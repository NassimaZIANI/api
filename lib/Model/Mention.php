<?php
/**
 * Mention
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * apogee API
 *
 * API for apogee
 *
 * OpenAPI spec version: 1.0.0
 * Contact: nassima.ziani1996@gmail.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.17
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * Mention Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Mention implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Mention';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id_m' => 'int',
        'nom_m' => 'string',
        'accro_m' => '\Swagger\Client\Model\AccroM',
        'diplome' => '\Swagger\Client\Model\Diplome',
        'list_parcours' => '\Swagger\Client\Model\ListParcours'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id_m' => null,
        'nom_m' => null,
        'accro_m' => null,
        'diplome' => null,
        'list_parcours' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id_m' => 'idM',
        'nom_m' => 'nomM',
        'accro_m' => 'accroM',
        'diplome' => 'diplome',
        'list_parcours' => 'listParcours'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id_m' => 'setIdM',
        'nom_m' => 'setNomM',
        'accro_m' => 'setAccroM',
        'diplome' => 'setDiplome',
        'list_parcours' => 'setListParcours'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id_m' => 'getIdM',
        'nom_m' => 'getNomM',
        'accro_m' => 'getAccroM',
        'diplome' => 'getDiplome',
        'list_parcours' => 'getListParcours'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id_m'] = isset($data['id_m']) ? $data['id_m'] : null;
        $this->container['nom_m'] = isset($data['nom_m']) ? $data['nom_m'] : null;
        $this->container['accro_m'] = isset($data['accro_m']) ? $data['accro_m'] : null;
        $this->container['diplome'] = isset($data['diplome']) ? $data['diplome'] : null;
        $this->container['list_parcours'] = isset($data['list_parcours']) ? $data['list_parcours'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id_m
     *
     * @return int
     */
    public function getIdM()
    {
        return $this->container['id_m'];
    }

    /**
     * Sets id_m
     *
     * @param int $id_m id_m
     *
     * @return $this
     */
    public function setIdM($id_m)
    {
        $this->container['id_m'] = $id_m;

        return $this;
    }

    /**
     * Gets nom_m
     *
     * @return string
     */
    public function getNomM()
    {
        return $this->container['nom_m'];
    }

    /**
     * Sets nom_m
     *
     * @param string $nom_m nom_m
     *
     * @return $this
     */
    public function setNomM($nom_m)
    {
        $this->container['nom_m'] = $nom_m;

        return $this;
    }

    /**
     * Gets accro_m
     *
     * @return \Swagger\Client\Model\AccroM
     */
    public function getAccroM()
    {
        return $this->container['accro_m'];
    }

    /**
     * Sets accro_m
     *
     * @param \Swagger\Client\Model\AccroM $accro_m accro_m
     *
     * @return $this
     */
    public function setAccroM($accro_m)
    {
        $this->container['accro_m'] = $accro_m;

        return $this;
    }

    /**
     * Gets diplome
     *
     * @return \Swagger\Client\Model\Diplome
     */
    public function getDiplome()
    {
        return $this->container['diplome'];
    }

    /**
     * Sets diplome
     *
     * @param \Swagger\Client\Model\Diplome $diplome diplome
     *
     * @return $this
     */
    public function setDiplome($diplome)
    {
        $this->container['diplome'] = $diplome;

        return $this;
    }

    /**
     * Gets list_parcours
     *
     * @return \Swagger\Client\Model\ListParcours
     */
    public function getListParcours()
    {
        return $this->container['list_parcours'];
    }

    /**
     * Sets list_parcours
     *
     * @param \Swagger\Client\Model\ListParcours $list_parcours list_parcours
     *
     * @return $this
     */
    public function setListParcours($list_parcours)
    {
        $this->container['list_parcours'] = $list_parcours;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


