<?php
/**
 * ParcoursBody
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * apogee API
 *
 * API for apogee
 *
 * OpenAPI spec version: 1.0.0
 * Contact: nassima.ziani1996@gmail.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.17
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * ParcoursBody Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ParcoursBody implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ParcoursBody';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'nom_p' => 'string',
        'accro_p' => 'string',
        'effectif_1_a' => 'float',
        'effectif_2_a' => 'float',
        'effectif_3_a' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'nom_p' => null,
        'accro_p' => null,
        'effectif_1_a' => 'float',
        'effectif_2_a' => 'float',
        'effectif_3_a' => 'float'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'nom_p' => 'nomP',
        'accro_p' => 'accroP',
        'effectif_1_a' => 'effectif_1A',
        'effectif_2_a' => 'effectif_2A',
        'effectif_3_a' => 'effectif_3A'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'nom_p' => 'setNomP',
        'accro_p' => 'setAccroP',
        'effectif_1_a' => 'setEffectif1A',
        'effectif_2_a' => 'setEffectif2A',
        'effectif_3_a' => 'setEffectif3A'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'nom_p' => 'getNomP',
        'accro_p' => 'getAccroP',
        'effectif_1_a' => 'getEffectif1A',
        'effectif_2_a' => 'getEffectif2A',
        'effectif_3_a' => 'getEffectif3A'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['nom_p'] = isset($data['nom_p']) ? $data['nom_p'] : null;
        $this->container['accro_p'] = isset($data['accro_p']) ? $data['accro_p'] : null;
        $this->container['effectif_1_a'] = isset($data['effectif_1_a']) ? $data['effectif_1_a'] : null;
        $this->container['effectif_2_a'] = isset($data['effectif_2_a']) ? $data['effectif_2_a'] : null;
        $this->container['effectif_3_a'] = isset($data['effectif_3_a']) ? $data['effectif_3_a'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets nom_p
     *
     * @return string
     */
    public function getNomP()
    {
        return $this->container['nom_p'];
    }

    /**
     * Sets nom_p
     *
     * @param string $nom_p nom_p
     *
     * @return $this
     */
    public function setNomP($nom_p)
    {
        $this->container['nom_p'] = $nom_p;

        return $this;
    }

    /**
     * Gets accro_p
     *
     * @return string
     */
    public function getAccroP()
    {
        return $this->container['accro_p'];
    }

    /**
     * Sets accro_p
     *
     * @param string $accro_p accro_p
     *
     * @return $this
     */
    public function setAccroP($accro_p)
    {
        $this->container['accro_p'] = $accro_p;

        return $this;
    }

    /**
     * Gets effectif_1_a
     *
     * @return float
     */
    public function getEffectif1A()
    {
        return $this->container['effectif_1_a'];
    }

    /**
     * Sets effectif_1_a
     *
     * @param float $effectif_1_a effectif_1_a
     *
     * @return $this
     */
    public function setEffectif1A($effectif_1_a)
    {
        $this->container['effectif_1_a'] = $effectif_1_a;

        return $this;
    }

    /**
     * Gets effectif_2_a
     *
     * @return float
     */
    public function getEffectif2A()
    {
        return $this->container['effectif_2_a'];
    }

    /**
     * Sets effectif_2_a
     *
     * @param float $effectif_2_a effectif_2_a
     *
     * @return $this
     */
    public function setEffectif2A($effectif_2_a)
    {
        $this->container['effectif_2_a'] = $effectif_2_a;

        return $this;
    }

    /**
     * Gets effectif_3_a
     *
     * @return float
     */
    public function getEffectif3A()
    {
        return $this->container['effectif_3_a'];
    }

    /**
     * Sets effectif_3_a
     *
     * @param float $effectif_3_a effectif_3_a
     *
     * @return $this
     */
    public function setEffectif3A($effectif_3_a)
    {
        $this->container['effectif_3_a'] = $effectif_3_a;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


